# produce yaml file cron job
name: Transcribe
on:
  push:
    branches:
      - 'master'
    paths-ignore:
      - "*.md"
      - "*.txt"
  workflow_dispatch:
    inputs:
      youtube_url:
        description: 'Url to youtube video'     
        required: true
        default: 'https://www.youtube.com/watch?v=dp8PhLsUcFE' 
      iteration:
        description: 'Iteration number'
        required: false
        default: "1"
      table_name:
        description: 'Table name for planetscale'
        required: false

env:
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_LIVESTREAM_WEBHOOK }}
  WIT_AI_TOKEN: ${{ secrets.WIT_AI_TOKEN }}
  GH_WORKFLOW_TOKEN: ${{ secrets.GH_WORKFLOW_TOKEN }}
  DB_NAME: ${{ secrets.PSCALE_DB_NAME }}
  DB_USER: ${{ secrets.PSCALE_DB_USER }}
  DB_HOST: ${{ secrets.PSCALE_DB_HOST }}
  DB_PASSWORD: ${{ secrets.PSCALE_DB_PASSWORD }}
  MAX_ITERATIONS: 60
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
# Add cron job to ensure external webpages + apis have no changed

jobs:
  scrap_data:
    runs-on: ubuntu-latest
    name: transcribe video
    steps:

      # run on latest tag when more stable
      # # Get new tags from remote
      # git fetch --tags

      # Get latest tag name
      # latestTag=$(git describe --tags `git rev-list --tags --max-count=1`)

      # Checkout latest tag
      # git checkout $latestTag
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10.4' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64'
      - name: Install Dependencies
        run: |
          python -m pip install -r requirements/requirements.txt
      - uses: FedericoCarboni/setup-ffmpeg@v1
        # same as GITHUB_WORKSPACE 
        id: setup-ffmpeg

      - name: Where are files?
        run: ls

      - name: Set env vars
        run: |
          echo "ITERATION=${{ github.event.inputs.iteration }}" >> $GITHUB_ENV
          echo "YOUTUBE_URL=${{ github.event.inputs.youtube_url}}" >> $GITHUB_ENV
      
      - name: set table name if available
        if: "${{ github.event.inputs.table_name != '' }}"
        run: |
            echo "TABLE_NAME=${{ github.event.inputs.table_name }}" >> $GITHUB_ENV
            echo ${{ github.event.inputs.table_name }}
            export TABLE_NAME=${{ github.event.inputs.table_name }}
      - name: Transcribe with url
        if: "${{ github.event.inputs.youtube_url != '' }}"
        run: |
          echo $TABLE_NAME
          python transcript_manager.py --url "${{ github.event.inputs.youtube_url }}"

      # for master/main only use
      - name: Transcribe without url
        if: "${{ github.event.inputs.youtube_url == '' }}"
        run: python transcript_manager.py
        # timeout-minutes: 320
        
      - name: Commit files
        run: |
          if [[ -z $(git status -s) ]]
          then
            echo "tree is clean"
          else
            git add . || true
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            echo "tree is dirty, please commit changes before running this"
            echo "PUSH_FILES=true" >> $GITHUB_ENV
          fi
      - name: Test
        run: echo ${{ env.PUSH_FILES }}

      - name: Step To run on failure
        if: ${{ failure() }}
        run: |
          echo "Attempt to dispatch another event"
          python dispatch_another_event.py --youtube_url "${{ github.event.inputs.youtube_url }}" --iteration ${{ github.event.inputs.iteration }}

      # upload log.txt
      - name: Upload log.txt
        if: ${{ env.PUSH_FILES == 'true' }}
        uses: actions/upload-artifact@v2
        with:
          name: log.txt
          path: log.txt
      # - name: Push changes
      #   if: ${{ env.PUSH_FILES == 'true' }}
      #   uses: ad-m/github-push-action@master
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     branch: ${{ github.ref }}

      - name: check env var
        run:
          echo ${{ env.TERMINATE_LIVESTREAM }}
      - name: rerun workflow
        # youtube url and TERMINATE_LIVESTREAM is not set
        if: "${{ github.event.inputs.youtube_url != '' }} && ${{ env.TERMINATE_LIVESTREAM != 'TRUE' }}"
        run: |
          echo "rerun workflow"
          python dispatch_another_event.py --youtube_url "${{ github.event.inputs.youtube_url }}" --iteration ${{ github.event.inputs.iteration }}
